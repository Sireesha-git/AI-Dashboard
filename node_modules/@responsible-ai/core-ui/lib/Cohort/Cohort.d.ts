import { IFilter, ICompositeFilter } from "../Interfaces/IFilter";
import { JointDataset } from "../util/JointDataset";
export declare class Cohort {
    name: string;
    private jointDataset;
    filters: IFilter[];
    compositeFilters: ICompositeFilter[];
    private static _cohortIndex;
    filteredData: Array<{
        [key: string]: number;
    }>;
    private readonly cohortIndex;
    private cachedAverageImportance;
    private cachedTransposedLocalFeatureImportances;
    private currentSortKey;
    private currentSortReversed;
    constructor(name: string, jointDataset: JointDataset, filters?: IFilter[], compositeFilters?: ICompositeFilter[]);
    static getLabeledFilters(filters: IFilter[], jointDataset: JointDataset): IFilter[];
    static getLabeledCompositeFilters(compositeFilters: ICompositeFilter[], jointDataset: JointDataset): ICompositeFilter[];
    updateFilter(filter: IFilter, index?: number): void;
    getCohortID(): number;
    deleteFilter(index: number): void;
    getRow(index: number): {
        [key: string]: number;
    };
    sort(columnName?: string, reverse?: boolean): void;
    sortByGroup(columnName: string | undefined, groupingFunction: (row: any) => boolean): void;
    unwrap(key: string, applyBin?: boolean): any[];
    calculateAverageImportance(): number[];
    transposedLocalFeatureImportances(): number[][];
    clearCachedImportances(): void;
    private filterRow;
    private filterRecursively;
    private filterComposite;
    private applyFilters;
}
