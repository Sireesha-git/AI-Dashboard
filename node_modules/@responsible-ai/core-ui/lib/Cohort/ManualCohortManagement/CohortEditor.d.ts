import React from "react";
import { ModelAssessmentContext } from "../../Context/ModelAssessmentContext";
import { DatasetCohort } from "../../DatasetCohort";
import { IDataset } from "../../Interfaces/IDataset";
import { IExplanationModelMetadata } from "../../Interfaces/IExplanationContext";
import { ICompositeFilter, IFilter } from "../../Interfaces/IFilter";
import { JointDataset } from "../../util/JointDataset";
import { Cohort } from "../Cohort";
export interface ICohortEditorProps {
    jointDataset: JointDataset;
    cohortName: string;
    isNewCohort: boolean;
    deleteIsDisabled: boolean;
    dataset?: IDataset;
    isFromExplanation: boolean;
    metadata?: IExplanationModelMetadata;
    features?: unknown[][];
    disableEditName?: boolean;
    existingCohortNames?: string[];
    onSave: (newCohort: Cohort, datasetCohort?: DatasetCohort, switchNew?: boolean) => void;
    closeCohortEditor: () => void;
    closeCohortEditorPanel: () => void;
    filterList?: IFilter[];
    compositeFilters?: ICompositeFilter[];
    onDelete?: () => void;
}
export interface ICohortEditorState {
    filters: IFilter[];
    compositeFilters: ICompositeFilter[];
    cohortName?: string;
    showConfirmation: boolean;
    showEmptyCohortError: boolean;
}
export declare class CohortEditor extends React.PureComponent<ICohortEditorProps, ICohortEditorState> {
    static contextType: React.Context<import("../../Context/ModelAssessmentContext").IModelAssessmentContext>;
    context: React.ContextType<typeof ModelAssessmentContext>;
    constructor(props: ICohortEditorProps);
    render(): React.ReactNode;
    private renderFooter;
    private readonly renderCancelDialog;
    private readonly renderEmptyCohortDialog;
    private isSaveDisabled;
    private isDuplicate;
    private deleteCohort;
    private readonly onCancelClick;
    private readonly onCancelConfirm;
    private readonly onCancelClose;
    private readonly onEmptyCohortClose;
    private saveCohort;
    private onCohortNameUpdated;
    private onCompositeFiltersUpdated;
    private onFilterUpdated;
}
