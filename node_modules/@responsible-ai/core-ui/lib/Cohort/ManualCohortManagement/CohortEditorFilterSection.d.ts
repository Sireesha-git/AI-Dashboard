import React from "react";
import { ModelAssessmentContext } from "../../Context/ModelAssessmentContext";
import { IExplanationModelMetadata } from "../../Interfaces/IExplanationContext";
import { IFilter } from "../../Interfaces/IFilter";
import { JointDataset } from "../../util/JointDataset";
export interface ICohortEditorFilterSectionProps {
    isFromExplanation: boolean;
    metadata?: IExplanationModelMetadata;
    filterIndex?: number;
    filters: IFilter[];
    jointDataset: JointDataset;
    openedFilter?: IFilter;
    onFiltersUpdated: (filters: IFilter[]) => void;
    onOpenedFilterUpdated: (openedFilter?: IFilter) => void;
    onSelectedFilterCategoryUpdated: (selectedFilterCategory?: string) => void;
    setFilterMessage: (filtersMessage: string) => void;
    setDefaultStateForKey: (key: string) => void;
}
export interface ICohortEditorFilterSectionState {
    showInvalidMinMaxValueError: boolean;
    showInvalidValueError: boolean;
}
export declare class CohortEditorFilterSection extends React.PureComponent<ICohortEditorFilterSectionProps, ICohortEditorFilterSectionState> {
    static contextType: React.Context<import("../../Context/ModelAssessmentContext").IModelAssessmentContext>;
    context: React.ContextType<typeof ModelAssessmentContext>;
    constructor(props: ICohortEditorFilterSectionProps);
    render(): React.ReactNode;
    private readonly setAsCategorical;
    private readonly setSelectedProperty;
    private saveState;
    private readonly setCategoricalValues;
    private readonly setComparison;
    private readonly setNumericValue;
    private updateFilter;
    private cancelFilter;
}
