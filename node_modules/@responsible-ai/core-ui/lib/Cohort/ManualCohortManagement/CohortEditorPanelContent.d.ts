import { IColumnRange } from "@responsible-ai/mlchartlib";
import React from "react";
import { IDataset } from "../../Interfaces/IDataset";
import { IExplanationModelMetadata } from "../../Interfaces/IExplanationContext";
import { ICompositeFilter, IFilter } from "../../Interfaces/IFilter";
import { JointDataset } from "../../util/JointDataset";
export interface ICohortEditorPanelContentProps {
    columnRanges?: {
        [key: string]: IColumnRange;
    };
    dataset: IDataset;
    isFromExplanation: boolean;
    cohortName?: string;
    compositeFilters: ICompositeFilter[];
    disableEditName?: boolean;
    existingCohortNames?: string[];
    features?: unknown[][];
    metadata?: IExplanationModelMetadata;
    filters: IFilter[];
    isNewCohort: boolean;
    jointDataset: JointDataset;
    onCohortNameUpdated: (cohortName?: string) => void;
    onCompositeFiltersUpdated: (compositeFilters: ICompositeFilter[]) => void;
    onFiltersUpdated: (filters: IFilter[]) => void;
}
export interface ICohortEditorPanelContentState {
    filterIndex?: number;
    openedFilter?: IFilter;
    selectedFilterCategory?: string;
    filtersMessage?: string;
}
export declare class CohortEditorPanelContent extends React.PureComponent<ICohortEditorPanelContentProps, ICohortEditorPanelContentState> {
    private readonly leftItems;
    private _isInitialized;
    constructor(props: ICohortEditorPanelContentProps);
    render(): React.ReactNode;
    private isDuplicate;
    private clearAllFilters;
    private setFilterMessage;
    private getErrorMessage;
    private readonly onFilterCategoryChange;
    private onSelectedFilterCategoryUpdated;
    private readonly setSelection;
    private setDefaultStateForKey;
    private getFilterValue;
    private getPreviousFilterArgValue;
    private removeFilter;
    private removeCompositeFilter;
    private editFilter;
    private onOpenedFilterUpdated;
    private setCohortName;
}
