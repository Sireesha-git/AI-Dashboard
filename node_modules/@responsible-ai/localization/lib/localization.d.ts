export declare const localization: import("./getLocalization").ILocalization<{
    Common: {
        close: string;
        tooltipButton: string;
        identityFeature: string;
        infoTitle: string;
        spinButton: string;
        editButton: string;
        decreaseValue: string;
        increaseValue: string;
        decreaseValueByOne: string;
        increaseValueByOne: string;
        loading: string;
    };
    ChartContextMenu: {
        hideData: string;
        viewData: string;
        viewInFullScreen: string;
        printChart: string;
        downloadCSV: string;
        downloadPNG: string;
        downloadJPEG: string;
        downloadPDF: string;
        downloadSVG: string;
        downloadXLS: string;
    };
    CausalAnalysis: {
        AggregateView: {
            binary: string;
            binaryDescription: string;
            regressionDescription: string;
            causalPoint: string;
            confidenceLower: string;
            confidenceUpper: string;
            confoundingFeature: string;
            continuous: string;
            continuousDescription: string;
            continuousRegressionDescription: string;
            description: string;
            directAggregate: string;
            here: string;
            infoTitle: string;
            lasso: string;
            unconfounding: string;
        };
        IndividualView: {
            currentOutcome: string;
            currentTreatment: string;
            dataRequired: string;
            selectedDatapoint: string;
            description: string;
            directIndividual: string;
            index: string;
            infoTitle: string;
            missingParameters: string;
            newOutcome: string;
            selectTreatment: string;
            setNewTreatment: string;
            treatmentValue: string;
        };
        MainMenu: {
            aggregate: string;
            cohortInfo: string;
            header: string;
            individual: string;
            learnMore: string;
            title: string;
            treatment: string;
            why: string;
        };
        TreatmentPolicy: {
            BarDescriptionBinary: string;
            BarDescriptionContinuous: string;
            BarTextBinary: string;
            BarTextContinuous: string;
            Description: string;
            Left: string;
            Recommended: string;
            Right: string;
            SelectPolicy: string;
            Size: string;
            Table: string;
            TableDescription: string;
            alwaysTreat: string;
            averageGainBinary: string;
            averageGainContinuous: string;
            header: string;
            infoTitle: string;
            nSample: string;
            noData: string;
        };
    };
    Core: {
        AccessibleDetailsList: {
            ResizableDialog: {
                title: string;
                subText: string;
            };
            resize: string;
            cancel: string;
            minErrorMessage: string;
            minMaxErrorMessage: string;
        };
        ExpandableText: {
            SeeLess: string;
            SeeMore: string;
        };
        NoData: {
            Title: string;
        };
        ComparisonTypes: {
            lt: string;
            lte: string;
            gt: string;
            gte: string;
            eq: string;
            ne: string;
            in: string;
            nin: string;
            rg: string;
            nrg: string;
            Unknown: string;
        };
        ShiftCohort: {
            apply: string;
            applyAriaLabel: string;
            cancel: string;
            title: string;
            subText: string;
            selectCohort: string;
            cohortList: string;
        };
        PreBuiltCohort: {
            featureNameNotFound: string;
            notACategoricalFeature: string;
        };
        EmptyCohortDialog: {
            title: string;
            subText: string;
        };
    };
    Counterfactuals: {
        AriaLabel: string;
        CurrentTreatment: string;
        EffectLowerBound: string;
        EffectOfTreatment: string;
        EffectUpperBound: string;
        ErrorDialog: {
            Close: string;
            ErrorPrefix: string;
            PythonError: string;
        };
        RecommendedTreatment: string;
        WhatIf: {
            setValue: string;
            sortFeatures: string;
            percentCounterfactualLocalImportance: string;
            toggleToolTipBody: string;
            toggleToolTipHeader: string;
            predictedClass: string;
            predictedValue: string;
        };
        Size: string;
        loading: string;
        counterfactualEx: string;
        counterfactualName: string;
        createWhatIfCounterfactual: string;
        createCounterfactual: string;
        counterfactualAriaLabel: string;
        revertToBubbleChart: string;
        createOwn: string;
        currentClass: string;
        currentRange: string;
        decreaseByOne: string;
        desiredClass: string;
        header: string;
        increaseByOne: string;
        individualTreatment: string;
        listChoose: string;
        listDescription: string;
        localImportanceDescription: string;
        localImportanceSelectData: string;
        largeLocalImportanceSelectData: string;
        localImportanceFetchError: string;
        BubbleChartFetchError: string;
        noData: string;
        noFeatures: string;
        panelDescription: string;
        panelDescriptionWithoutSetValue: string;
        whatIfPanelHeader: string;
        panelHeader: string;
        recommendedPolicy: string;
        referenceDatapoint: string;
        saveAsNew: string;
        saveDescription: string;
        seePrediction: string;
        selectedDatapoint: string;
        showOnly: string;
        showTop: string;
        whatifDescription: string;
    };
    DataAnalysis: {
        TableView: {
            description: string;
            infoTitle: string;
        };
    };
    ErrorAnalysis: {
        Cohort: {
            "_cohort.comment": string;
            cohort: string;
            defaultLabel: string;
        };
        CohortBaseAndFilters: {
            globalCohortAndFilters: string;
            globalCohort: string;
            errorExplorer: string;
            filters: string;
        };
        CohortInfo: {
            baseCohortInstances: string;
            basicInformation: string;
            cohortInformation: string;
            correct: string;
            filters: string;
            incorrect: string;
            predictionPath: string;
            saveCohort: string;
            selectedCohortInstances: string;
            total: string;
        };
        CohortList: {
            coverage: string;
        };
        EditCohort: {
            cohortName: string;
            subText: string;
        };
        FeatureList: {
            featureList: string;
            apply: string;
            features: string;
            importances: string;
            treeMapDescription: string;
            staticTreeMapDescription: string;
            searchResultMessage: string;
        };
        TreeViewParameters: {
            maximumDepth: string;
            maximumDepthInfoText: string;
            maximumDepthTitle: string;
            numLeaves: string;
            numLeavesInfoText: string;
            numLeavesTitle: string;
            minDataInLeaf: string;
            minDataInLeafInfoText: string;
            minDataInLeafTitle: string;
        };
        TreeLegend: {
            clearSelection: string;
        };
        FilterTooltip: {
            correctNum: string;
            countNum: string;
            errorSum: string;
            incorrectNum: string;
        };
        InspectionView: {
            emptyError: string;
            selectedDatapoints: string;
        };
        InstanceView: {
            inspect: string;
            selection: string;
        };
        MainMenu: {
            cohortInfo: string;
            cohortList: string;
            cohortSettings: string;
            errorAnalysisLabel: string;
            errorExplorer: string;
            errorExplorerLabel: string;
            explanation: string;
            featureList: string;
            fullscreen: string;
            heatMap: string;
            newCohort: string;
            shiftCohort: string;
            treeMap: string;
            whatIf: string;
        };
        MapShift: {
            cancel: string;
            close: string;
            move: string;
            saveAs: string;
            shift: string;
            heatTitle: string;
            heatSubText: string;
            treeTitle: string;
            treeSubText: string;
        };
        MatrixArea: {
            clearAll: string;
            emptyText: string;
            selectAll: string;
        };
        MatrixFilter: {
            disabledWarning: string;
        };
        MatrixSummary: {
            heatMapInfoTitle: string;
            heatMapDescription: string;
            heatMapStaticDescription: string;
        };
        MatrixOptions: {
            quantileBinningLabel: string;
            binningThresholdLabel: string;
            toggleOnLabel: string;
            toggleOffLabel: string;
            quantileBinningInfoText: string;
            quantileBinningTitle: string;
            binningThresholdInfoText: string;
            binningThresholdTitle: string;
        };
        Metrics: {
            AccuracyScore: {
                Name: string;
                Info: string;
                Short: string;
                Title: string;
            };
            ErrorRate: {
                Name: string;
                Info: string;
                Short: string;
                Title: string;
            };
            F1Score: {
                Name: string;
                Info: string;
                Short: string;
                Title: string;
            };
            MeanAbsoluteError: {
                Name: string;
                Info: string;
                Short: string;
                Title: string;
            };
            MeanSquaredError: {
                Name: string;
                Info: string;
                Short: string;
                Title: string;
            };
            Precision: {
                Name: string;
                Info: string;
                Short: string;
                Title: string;
            };
            Recall: {
                Name: string;
                Info: string;
                Short: string;
                Title: string;
            };
            MacroPrecision: {
                Name: string;
                Info: string;
                Short: string;
                Title: string;
            };
            MicroPrecision: {
                Name: string;
                Info: string;
                Short: string;
                Title: string;
            };
            MacroRecall: {
                Name: string;
                Info: string;
                Short: string;
                Title: string;
            };
            MicroRecall: {
                Name: string;
                Info: string;
                Short: string;
                Title: string;
            };
            MacroF1Score: {
                Name: string;
                Info: string;
                Short: string;
                Title: string;
            };
            MicroF1Score: {
                Name: string;
                Info: string;
                Short: string;
                Title: string;
            };
            MeanAveragePrecision: {
                Name: string;
                Info: string;
                Short: string;
                Title: string;
            };
            AveragePrecision: {
                Name: string;
                Info: string;
                Short: string;
                Title: string;
            };
            AverageRecall: {
                Name: string;
                Info: string;
                Short: string;
                Title: string;
            };
            metricName: string;
            metricValue: string;
        };
        MetricSelector: {
            selectorLabel: string;
            feature1SelectorLabel: string;
            feature2SelectorLabel: string;
        };
        Navigation: {
            cohortSaved: string;
            dataExplorer: string;
            errorExplorer: string;
            globalExplanation: string;
            localExplanation: string;
            localExplanationInspection: string;
        };
        SaveCohort: {
            cancel: string;
            close: string;
            cohortName: string;
            move: string;
            save: string;
            saveTitle: string;
            subText: string;
            defaultLabelCopy: string;
        };
        TreeView: {
            ariaLabel: string;
            disabledArialLabel: string;
            treeMapInfoTitle: string;
            treeDescription: string;
            treeStaticDescription: string;
            disabledWarning: string;
        };
        WhatIfPanel: {
            whatIfHeader: string;
        };
        "_dataExploration.comment": string;
        "_dataExplorerView.comment": string;
        "_defaultClassNames.comment": string;
        "_defaultFeatureNames.comment": string;
        "_globalExplanationView.comment": string;
        "_globalImportance.comment": string;
        "_instanceView.comment": string;
        "_localExplanationView.comment": string;
        allSelected: string;
        cells: string;
        cellsInfo: string;
        cellsTitle: string;
        cohortInfo: string;
        correctPrediction: string;
        correctTotal: string;
        dataExploration: string;
        dataExplorerView: string;
        defaultClassNames: string;
        defaultFeatureNames: string;
        errorCoverage: string;
        errorCoverageInfo: string;
        errorCoverageTitle: string;
        globalExplanationView: string;
        globalImportance: string;
        incorrectPrediction: string;
        incorrectTotal: string;
        instanceView: string;
        localExplanationView: string;
        noFeature: string;
        scaleWarning: string;
        whatIfDatapoints: string;
    };
    Fairness: {
        ValidationErrors: {
            missingPerformanceMetric: string;
            missingFairnessMetric: string;
        };
        BinDialog: {
            cancel: string;
            cancelAriaLabel: string;
            categoryHeader: string;
            header: string;
            makeCategorical: string;
            numberOfBins: string;
            save: string;
            saveAriaLabel: string;
        };
        DropdownHeaders: {
            errorMetric: string;
            fairnessMetric: string;
            performanceMetric: string;
            sensitiveFeature: string;
        };
        ErrorBounds: {
            howToRead: string;
            introModalText1: string;
            wilsonScores: string;
            introModalText2: string;
            normalApproximation: string;
            introModalText3: string;
        };
        Fairness: {
            body: string;
            bodyLegacy: string;
            header: string;
            pickerHeader: string;
        };
        Feature: {
            "_categoriesOverflow.comment": string;
            "_summaryCategoricalCount.comment": string;
            "_summaryNumericalCount.comment": string;
            body: string;
            categoriesOverflow: string;
            editBinning: string;
            header: string;
            hideCategories: string;
            learnMore: string;
            showCategories: string;
            subgroups: string;
            summaryCategoricalCount: string;
            summaryNumericCount: string;
        };
        Footer: {
            back: string;
            next: string;
        };
        Header: {
            documentation: string;
            title: string;
        };
        Intro: {
            explanatoryStep: string;
            fairness: string;
            fairnessDashboard: string;
            fairnessInfo: string;
            features: string;
            featuresInfo: string;
            getStarted: string;
            introBody: string;
            performance: string;
            performanceInfo: string;
            welcome: string;
        };
        Metrics: {
            Groups: {
                auc: string;
                average: string;
                classificationAccuracyAndErrorRate: string;
                custom: string;
                equalizedOdds: string;
                f1_score: string;
                falseNegativeRate: string;
                falsePositiveRate: string;
                loss: string;
                overUnderPrediction: string;
                precision: string;
                r2_score: string;
                regressionError: string;
                selectionRate: string;
                trueNegativeRate: string;
                truePositiveRate: string;
            };
            ROCAUCScoreMin: string;
            ROCAUCScoreMinDescription: string;
            "_f1Score.comment": string;
            "_logLoss.comment": string;
            accuracyDescription: string;
            accuracyScore: string;
            accuracyScoreDifference: string;
            accuracyScoreDifferenceDescription: string;
            accuracyScoreMin: string;
            accuracyScoreMinDescription: string;
            accuracyScoreRatio: string;
            accuracyScoreRatioDescription: string;
            auc: string;
            aucDescription: string;
            average: string;
            balancedAccuracy: string;
            balancedAccuracyDescription: string;
            balancedAccuracyScoreMin: string;
            balancedAccuracyScoreMinDescription: string;
            balancedRMSEDescription: string;
            balancedRootMeanSquaredError: string;
            demographicParityDifference: string;
            demographicParityDifferenceDescription: string;
            demographicParityRatio: string;
            demographicParityRatioDescription: string;
            equalizedOddsDifference: string;
            equalizedOddsDifferenceDescription: string;
            equalizedOddsRatio: string;
            equalizedOddsRatioDescription: string;
            errorRateDifference: string;
            errorRateDifferenceDescription: string;
            errorRateRatio: string;
            errorRateRatioDescription: string;
            f1Score: string;
            f1ScoreDescription: string;
            f1ScoreMin: string;
            f1ScoreMinDescription: string;
            falloutRate: string;
            falseNegativeRate: string;
            falseNegativeRateDescription: string;
            falseNegativeRateDifference: string;
            falseNegativeRateDifferenceDescription: string;
            falseNegativeRateRatio: string;
            falseNegativeRateRatioDescription: string;
            falsePositiveRate: string;
            falsePositiveRateDescription: string;
            falsePositiveRateDifference: string;
            falsePositiveRateDifferenceDescription: string;
            falsePositiveRateRatio: string;
            falsePositiveRateRatioDescription: string;
            logLoss: string;
            logLossMax: string;
            logLossMaxDescription: string;
            maxError: string;
            meanAbsoluteError: string;
            meanAbsoluteErrorDescription: string;
            meanAbsoluteErrorMax: string;
            meanAbsoluteErrorMaxDescription: string;
            meanSquaredError: string;
            meanSquaredErrorMax: string;
            meanSquaredErrorMaxDescription: string;
            meanSquaredLogError: string;
            medianAbsoluteError: string;
            missRate: string;
            mseDescription: string;
            overprediction: string;
            precisionDescription: string;
            precisionScore: string;
            precisionScoreMin: string;
            precisionScoreMinDescription: string;
            r2Description: string;
            r2ScoreMin: string;
            r2ScoreMinDescription: string;
            r2_score: string;
            recallDescription: string;
            recallScore: string;
            recallScoreMin: string;
            recallScoreMinDescription: string;
            rms_error: string;
            rmseDescription: string;
            selectionRate: string;
            specificityScore: string;
            trueNegativeRateDifference: string;
            trueNegativeRateDifferenceDescription: string;
            trueNegativeRateRatio: string;
            trueNegativeRateRatioDescription: string;
            truePositiveRateDifference: string;
            truePositiveRateDifferenceDescription: string;
            truePositiveRateRatio: string;
            truePositiveRateRatioDescription: string;
            underprediction: string;
            zeroOneLoss: string;
        };
        ModelComparison: {
            "_howToReadText.comment": string;
            disparity: string;
            disparityInOutcomes: string;
            disparityInPerformance: string;
            downloadReport: string;
            helpModalText1: string;
            helpModalText2: string;
            higher: string;
            howToMeasureDisparity: string;
            howToRead: string;
            howToReadText: string;
            insights: string;
            insightsLegacy: string;
            insightsText2: string;
            insightsText3: string;
            insightsText3v1FairnessMetric: string;
            insightsText4: string;
            introModalText: string;
            lower: string;
            period: string;
            rangesFrom: string;
            title: string;
            to: string;
        };
        Performance: {
            "_body.comment": string;
            binary: string;
            binaryClassifier: string;
            body: string;
            continuous: string;
            header: string;
            modelMakes: string;
            modelsMake: string;
            probabilisticRegressor: string;
            regressor: string;
        };
        Report: {
            "_globalPerformanceText.comment": string;
            "_modelName.comment": string;
            "_performanceDisparityText.comment": string;
            "_tooltipError.comment": string;
            "_tooltipPrediction.comment": string;
            assessmentResults: string;
            backToComparisons: string;
            backToComparisonsLegacy: string;
            chartChoiceDropdownHeader: string;
            chartChoiceAriaLabel: string;
            classificationOutcomesHowToRead: string;
            classificationPerformanceHowToRead1: string;
            classificationPerformanceHowToRead2: string;
            classificationPerformanceHowToRead3: string;
            classificationPerformanceHowToReadV2: string;
            collapseSensitiveAttributes: string;
            distributionOfErrors: string;
            distributionOfPredictions: string;
            editConfiguration: string;
            expandSensitiveAttributes: string;
            falseNegativeRate: string;
            falsePositiveRate: string;
            globalPerformanceText: string;
            groupLabel: string;
            maxTag: string;
            minTag: string;
            modelName: string;
            outcomesTitle: string;
            overallLabel: string;
            overestimationError: string;
            overpredictionExplanation: string;
            performanceChartHeaderBinaryClassification: string;
            performanceChartHeaderProbability: string;
            performanceChartHeaderRegression: string;
            performanceDisparityText: string;
            probabilityPerformanceHowToRead1: string;
            probabilityPerformanceHowToRead2: string;
            probabilityPerformanceHowToRead3: string;
            regressionOutcomesHowToRead: string;
            regressionPerformanceHowToRead: string;
            title: string;
            tooltipError: string;
            tooltipPrediction: string;
            underestimationError: string;
            underpredictionExplanation: string;
        };
        "_attributesCount.comment": string;
        "_defaultClassNames.comment": string;
        "_defaultCustomMetricName.comment": string;
        "_defaultFeatureNames.comment": string;
        "_instanceCount.comment": string;
        "_loremIpsum.comment": string;
        attributes: string;
        attributesCount: string;
        calculating: string;
        close: string;
        dataSpecifications: string;
        defaultClassNames: string;
        defaultCustomMetricName: string;
        defaultFeatureNames: string;
        defaultSingleFeatureName: string;
        done: string;
        errorOnInputs: string;
        fairnessMetric: string;
        instanceCount: string;
        loremIpsum: string;
        modelComparisonTab: string;
        opportunityTab: string;
        performanceMetric: string;
        performanceMetricLegacy: string;
        performanceTab: string;
        sensitiveFeatures: string;
        singleAttributeCount: string;
        tableTab: string;
    };
    Interpret: {
        AggregateImportance: {
            "_featureLabel.comment": string;
            "_high.comment": string;
            "_importanceLabel.comment": string;
            "_low.comment": string;
            "_noColor.comment": string;
            "_predictedClass.comment": string;
            "_predictedClassTooltip.comment": string;
            "_predictedOutputTooltip.comment": string;
            "_predictedValue.comment": string;
            "_scaledFeatureValue.comment": string;
            "_tooManyRows.comment": string;
            "_topKFeatures.comment": string;
            "_trueClass.comment": string;
            "_trueClassTooltip.comment": string;
            "_trueOutputTooltip.comment": string;
            "_trueValue.comment": string;
            "_valueLabel.comment": string;
            featureLabel: string;
            high: string;
            importanceLabel: string;
            low: string;
            noColor: string;
            predictedClass: string;
            predictedClassTooltip: string;
            predictedOutputTooltip: string;
            predictedValue: string;
            scaledFeatureValue: string;
            tooManyRows: string;
            topKFeatures: string;
            topKInfo: string;
            trueClass: string;
            trueClassTooltip: string;
            trueOutputTooltip: string;
            trueValue: string;
            valueLabel: string;
        };
        AxisConfigDialog: {
            TreatAsCategorical: string;
            "_TreatAsCategorical.comment": string;
            "_binLabel.comment": string;
            "_ditherLabel.comment": string;
            "_groupByCohort.comment": string;
            "_numberOfBins.comment": string;
            "_select.comment": string;
            "_selectClass.comment": string;
            "_selectFeature.comment": string;
            "_selectFilter.comment": string;
            apply: string;
            binLabel: string;
            countHelperText: string;
            ditherLabel: string;
            groupByCohort: string;
            logarithmicScaling: string;
            numOfBins: string;
            selectClass: string;
            selectFeature: string;
            selectFilter: string;
        };
        BarChart: {
            "_absoluteGlobal.comment": string;
            "_absoluteLocal.comment": string;
            "_calculatingExplanation.comment": string;
            "_classLabel.comment": string;
            "_noData.comment": string;
            "_sortBy.comment": string;
            absoluteGlobal: string;
            absoluteLocal: string;
            calculatingExplanation: string;
            classLabel: string;
            noData: string;
            sortBy: string;
        };
        Charts: {
            "_countTooltipPrefix.comment": string;
            "_featurePrefix.comment": string;
            "_importance.comment": string;
            "_numberOfDatapoints.comment": string;
            "_rowIndex.comment": string;
            "_xValue.comment": string;
            "_yValue.comment": string;
            cohort: string;
            count: string;
            countTooltipPrefix: string;
            featureImportance: string;
            featurePrefix: string;
            howToRead: string;
            importancePrefix: string;
            numberOfDatapoints: string;
            rowIndex: string;
            absoluteIndex: string;
            xValue: string;
            yValue: string;
        };
        Cohort: {
            "_cohort.comment": string;
            cohort: string;
            defaultLabel: string;
            temporaryCohort: string;
        };
        CohortBanner: {
            "_addCohort.comment": string;
            "_binaryClassifier.comment": string;
            "_copy.comment": string;
            "_dataStatistics.comment": string;
            "_datapoints.comment": string;
            "_datasetCohorts.comment": string;
            "_duplicateCohort.comment": string;
            "_editCohort.comment": string;
            "_features.comment": string;
            "_filters.comment": string;
            "_multiclassClassifier.comment": string;
            "_regressor.comment": string;
            addCohort: string;
            binaryClassifier: string;
            copy: string;
            dataStatistics: string;
            datapoints: string;
            datasetCohorts: string;
            details: string;
            duplicateCohort: string;
            edit: string;
            editCohort: string;
            features: string;
            filters: string;
            multiclassClassifier: string;
            name: string;
            regressor: string;
        };
        CohortEditor: {
            columns: {
                index: string;
                dataset: string;
                predictedY: string;
                trueY: string;
                classificationOutcome: string;
                regressionError: string;
            };
            TreatAsCategorical: string;
            TreatAsCategoricalAriaLabelChecked: string;
            TreatAsCategoricalAriaLabelUnchecked: string;
            "_TreatAsCategorical.comment": string;
            "_addFilter.comment": string;
            "_addedFilters.comment": string;
            "_cohortNameError.comment": string;
            "_cohortNameLabel.comment": string;
            "_cohortNamePlaceholder.comment": string;
            "_defaultFilterState.comment": string;
            "_noAddedFilters.comment": string;
            "_placeholderName.comment": string;
            "_selectFilter.comment": string;
            addFilter: string;
            addFilterAriaLabel: string;
            addedFilters: string;
            cancel: string;
            cancelAriaLabel: string;
            cancelExistingCohort: string;
            cancelNewCohort: string;
            cancelNo: string;
            cancelTitle: string;
            cancelYes: string;
            cohortNameError: string;
            cohortNameDupError: string;
            cohortNameLabel: string;
            cohortNamePlaceholder: string;
            clearAllFilters: string;
            defaultFilterState: string;
            delete: string;
            deleteAriaLabel: string;
            invalidValueError: string;
            minimumGreaterThanMaximum: string;
            noAddedFilters: string;
            placeholderName: string;
            save: string;
            saveAriaLabel: string;
            saveAndSwitch: string;
            selectFilter: string;
            noFiltersApplied: string;
            filterAdded: string;
        };
        Columns: {
            "_classificationOutcome.comment": string;
            "_none.comment": string;
            "_regressionError.comment": string;
            classificationOutcome: string;
            dataset: string;
            error: string;
            falseNegative: string;
            falsePositive: string;
            none: string;
            predictedProbabilities: string;
            predictedLabels: string;
            trueLabels: string;
            regressionError: string;
            trueNegative: string;
            truePositive: string;
            correctlyClassified: string;
            misclassified: string;
        };
        CrossClass: {
            "_enumeratedClassInfo.comment": string;
            "_info.comment": string;
            "_label.comment": string;
            "_overview.comment": string;
            "_predictedClassInfo.comment": string;
            absoluteValInfo: string;
            close: string;
            crossClassWeights: string;
            enumeratedClassInfo: string;
            info: string;
            label: string;
            overviewInfo: string;
            predictedClassInfo: string;
        };
        DatasetExplorer: {
            "_aggregatePlots.comment": string;
            "_chartType.comment": string;
            "_colorValue.comment": string;
            "_helperText.comment": string;
            "_individualDatapoints.comment": string;
            "_missingPArameters.comment": string;
            "_noColor.comment": string;
            aggregatePlots: string;
            chartType: string;
            colorValue: string;
            infoTitle: string;
            helperText: string;
            individualDatapoints: string;
            missingParameters: string;
            noColor: string;
            datasetCohortDropdown: string;
        };
        DependencePlot: {
            "_featureImportanceOf.comment": string;
            "_placeholder.comment": string;
            featureImportanceOf: string;
            placeholder: string;
        };
        ExplanationScatter: {
            "_class.comment": string;
            "_colorValue.comment": string;
            "_count.comment": string;
            "_dataLabel.comment": string;
            "_importanceLabel.comment": string;
            "_index.comment": string;
            "_predictedY.comment": string;
            "_probabilityLabel.comment": string;
            "_trueY.comment": string;
            "_xValue.comment": string;
            "_yValue.comment": string;
            class: string;
            colorValue: string;
            count: string;
            dataGroupLabel: string;
            dataLabel: string;
            importanceLabel: string;
            index: string;
            output: string;
            predictedY: string;
            odIncorrect: string;
            odCorrect: string;
            probabilityLabel: string;
            trueY: string;
            xValue: string;
            yValue: string;
        };
        ExplanationSummary: {
            clickHere: string;
            limeDescription: string;
            limeTitle: string;
            mimicDescription: string;
            mimicTitle: string;
            pfiDescription: string;
            pfiTitle: string;
            shapDescription: string;
            shapTitle: string;
            whatDoFeatureMean: string;
        };
        FeatureImportanceWrapper: {
            "_barText.comment": string;
            "_beehiveText.comment": string;
            "_boxText.comment": string;
            "_chartType.comment": string;
            "_globalImportanceExplanation.comment": string;
            "_multiclassImportanceAddendum.comment": string;
            "_violinText.comment": string;
            barText: string;
            beehiveText: string;
            boxText: string;
            chartType: string;
            globalImportanceExplanation: string;
            multiclassImportanceAddendum: string;
            violinText: string;
        };
        FilterOperations: {
            "_includes.comment": string;
            "_overflowFilterArgs.comment": string;
            equals: string;
            excludes: string;
            greaterThan: string;
            greaterThanEquals: string;
            inTheRangeOf: string;
            includes: string;
            lessThan: string;
            lessThanEquals: string;
            overflowFilterArgs: string;
        };
        Filters: {
            "_categoricalIncludeValues.comment": string;
            "_equalComparison.comment": string;
            "_greaterThanComparison.comment": string;
            "_greaterThanEqualToComparison.comment": string;
            "_inTheRangeOf.comment": string;
            "_lessThanComparison.comment": string;
            "_lessThanEqualToComparison.comment": string;
            "_numericValue.comment": string;
            "_numericalComparison.comment": string;
            "_uniqueValues.comment": string;
            categoricalIncludeValues: string;
            equalComparison: string;
            greaterThanComparison: string;
            greaterThanEqualToComparison: string;
            inTheRangeOf: string;
            lessThanComparison: string;
            lessThanEqualToComparison: string;
            max: string;
            maximum: string;
            min: string;
            minimum: string;
            numericValue: string;
            numericalComparison: string;
            uniqueValues: string;
        };
        GlobalOnlyChart: {
            helperText: string;
        };
        GlobalTab: {
            "_aggregateFeatureImportance.comment": string;
            "_datasetCohortSelector.comment": string;
            "_datasetCohorts.comment": string;
            "_helperText.comment": string;
            "_legendHelperText.comment": string;
            "_missingParameters.comment": string;
            "_sortBy.comment": string;
            "_topAtoB.comment": string;
            "_viewDependencePlotFor.comment": string;
            "_weightOptions.comment": string;
            absoluteValues: string;
            aggregateFeatureImportance: string;
            collapsedHelperText: string;
            datapoint: string;
            datasetCohortSelector: string;
            datasetCohorts: string;
            datasetRequired: string;
            dependencePlotFeatureSelectPlaceholder: string;
            dependencePlotHelperText: string;
            dependencePlotTitle: string;
            helperText: string;
            infoTitle: string;
            legendHelpText: string;
            missingParameters: string;
            sortByCohort: string;
            sortBy: string;
            topAtoB: string;
            viewDependencePlotFor: string;
            weightOptions: string;
            weightOptionsDropdown: string;
        };
        IcePlot: {
            "_errorPrefix.comment": string;
            "_featurePicker.comment": string;
            "_integerError.comment": string;
            "_loadingMessage.comment": string;
            "_maximumInputLabel.comment": string;
            "_minimumInputLabel.comment": string;
            "_noModelError.comment": string;
            "_numericError.comment": string;
            "_predictedProbability.comment": string;
            "_prediction.comment": string;
            "_predictionLabel.comment": string;
            "_probabilityLabel.comment": string;
            "_stepInputLabel.comment": string;
            "_submitPrompt.comment": string;
            "_topLevelErrorMessage.comment": string;
            close: string;
            errorPrefix: string;
            featurePickerLabel: string;
            integerError: string;
            loadingMessage: string;
            maximumInputLabel: string;
            minimumInputLabel: string;
            noModelError: string;
            numericError: string;
            predictedProbability: string;
            prediction: string;
            predictionLabel: string;
            probabilityLabel: string;
            pythonError: string;
            stepInputLabel: string;
            submitPrompt: string;
            topLevelErrorMessage: string;
        };
        ModelPerformance: {
            "_cohortPickerLabel.comment": string;
            "_helperText.comment": string;
            "_missingPArameters.comment": string;
            "_missingTrueY.comment": string;
            "_modelStatistics.comment": string;
            cohortPickerLabel: string;
            helperText: string;
            missingParameters: string;
            missingTrueY: string;
            modelStatistics: string;
        };
        PerturbationExploration: {
            "_perturbationLabel.comment": string;
            loadingMessage: string;
            perturbationLabel: string;
        };
        PredictionLabel: {
            "_predictedClassLabel.comment": string;
            "_predictionValueLabel.comment": string;
            predictedClassLabel: string;
            predictedValueLabel: string;
        };
        Statistics: {
            "_accuracy.comment": string;
            "_fnr.comment": string;
            "_fpr.comment": string;
            "_meanPrediction.comment": string;
            "_mse.comment": string;
            "_precision.comment": string;
            "_rSquared.comment": string;
            "_recall.comment": string;
            accuracy: string;
            coherence: string;
            bleuScore: string;
            bertScore: string;
            exactMatchRatio: string;
            equivalence: string;
            rougeScore: string;
            fluency: string;
            fnr: string;
            fpr: string;
            groundedness: string;
            hammingScore: string;
            meanPrediction: string;
            meteorScore: string;
            mse: string;
            precision: string;
            rSquared: string;
            recall: string;
            relevance: string;
            selectionRate: string;
            mae: string;
            f1Score: string;
            samples: string;
            meanAveragePrecision: string;
            averagePrecision: string;
            averageRecall: string;
        };
        ValidationErrors: {
            "_inconsistentDimensions.comment": string;
            addFilters: string;
            datasizeError: string;
            datasizeWarning: string;
            errorHeader: string;
            evalData: string;
            globalFeatureImportance: string;
            inconsistentDimensions: string;
            localFeatureImportance: string;
            notArray: string;
            notNonEmpty: string;
            predictedProbability: string;
            predictedY: string;
            varyingLength: string;
        };
        Violin: {
            "_groupBy.comment": string;
            "_groupName.comment": string;
            "_groupPredicted.comment": string;
            "_groupTrue.comment": string;
            groupBy: string;
            groupNone: string;
            groupPredicted: string;
            groupTrue: string;
        };
        WhatIf: {
            "_defaultCustomRootName.comment": string;
            "_filterFeaturePlaceholder.comment": string;
            closeAriaLabel: string;
            defaultCustomRootName: string;
            filterFeaturePlaceholder: string;
        };
        WhatIfTab: {
            IceGetStartedText: string;
            "_IceGetStartedText.comment": string;
            "_classLabel.comment": string;
            "_cohortPickerLabel.comment": string;
            "_deltaLabel.comment": string;
            "_disclaimer.comment": string;
            "_featureImportanceGetStartedText.comment": string;
            "_featureImportanceLackingParameters.comment": string;
            "_featureImportancePlot.comment": string;
            "_featureValues.comment": string;
            "_helperText.comment": string;
            "_iceLackingParameters.comment": string;
            "_icePlot.comment": string;
            "_indexLabel.comment": string;
            "_loading.comment": string;
            "_maxLabel.comment": string;
            "_minLabel.comment": string;
            "_missingParameters.comment": string;
            "_newPredictedClass.comment": string;
            "_newPredictedValue.comment": string;
            "_newProbability.comment": string;
            "_noneCreatedYet.comment": string;
            "_noneSelectedYet.comment": string;
            "_panelPlaceholder.comment": string;
            "_predictedClass.comment": string;
            "_predictedValue.comment": string;
            "_probability.comment": string;
            "_realPoint.comment": string;
            "_rowLabel.comment": string;
            "_saveAsNewPoint.comment": string;
            "_saveChanges.comment": string;
            "_scatterLegendText.comment": string;
            "_selectionLimit.comment": string;
            "_showLabel.comment": string;
            "_stepsLabel.comment": string;
            "_tooltipTitleMany.comment": string;
            "_trueClass.comment": string;
            "_whatIfDatapoint.comment": string;
            "_whatIfDatapoints.comment": string;
            "_whatIfHelpText.comment": string;
            "_whatIfNameLabel.comment": string;
            classLabel: string;
            classPickerLabel: string;
            cohortPickerLabel: string;
            dataPointInfo: string;
            deltaLabel: string;
            disclaimer: string;
            featureImportanceGetStartedText: string;
            featureImportanceLackingParameters: string;
            featureImportancePlot: string;
            featureValues: string;
            helperText: string;
            iceLackingParameters: string;
            icePlot: string;
            icePlotHelperText: string;
            indexLabel: string;
            loading: string;
            localFeatureImportanceForPoint: string;
            maxLabel: string;
            minLabel: string;
            missingParameters: string;
            newPredictedClass: string;
            newPredictedValue: string;
            newProbability: string;
            nonNumericValue: string;
            noneCreatedYet: string;
            noneSelectedYet: string;
            notAvailable: string;
            panelPlaceholder: string;
            predictedClass: string;
            predictedValue: string;
            probability: string;
            probabilityLabel: string;
            realPoint: string;
            rowLabel: string;
            saveAsNewPoint: string;
            saveChanges: string;
            scatterLegendText: string;
            selectionLimit: string;
            showLabel: string;
            stepsLabel: string;
            tooltipTitleFew: string;
            tooltipTitleMany: string;
            trueClass: string;
            trueValue: string;
            "trueValue.comment": string;
            whatIfDatapoint: string;
            whatIfDatapoints: string;
            whatIfHelpText: string;
            whatIfNameLabel: string;
            whatIfTooltipTitle: string;
        };
        "_absoluteAverage.comment": string;
        "_aggregateFeatureImportance.comment": string;
        "_dataExploration.comment": string;
        "_defaultClassNames.comment": string;
        "_defaultFeatureNames.comment": string;
        "_explanationExploration.comment": string;
        "_featureImportance.comment": string;
        "_globalImportance.comment": string;
        "_ice.comment": string;
        "_individualAndWhatIf.comment": string;
        "_intercept.comment": string;
        "_localFeatureImportance.comment": string;
        "_modelPerformance.comment": string;
        "_perturbationExploration.comment": string;
        "_predictedClass.comment": string;
        "_selectPoint.comment": string;
        "_summaryImportance.comment": string;
        absoluteAverage: string;
        aggregateFeatureImportance: string;
        calloutTitle: string;
        clearSelection: string;
        dataExploration: string;
        datasetExplorer: string;
        defaultClassNames: string;
        defaultFeatureNames: string;
        explanationExploration: string;
        feature: string;
        featureImportance: string;
        featureImportanceOf: string;
        globalImportance: string;
        ice: string;
        individualAndWhatIf: string;
        individualImportance: string;
        intercept: string;
        localFeatureImportance: string;
        modelPerformance: string;
        perturbationExploration: string;
        predictedClass: string;
        selectPoint: string;
        summaryImportance: string;
    };
    InterpretText: {
        View: {
            interpretibilityDashboard: string;
            importantWords: string;
            topFeatureList: string;
            allButton: string;
            negButton: string;
            posButton: string;
            legendText: string;
            legendTextForQA: string;
            label: string;
            colon: string;
            startingPosition: string;
            endingPosition: string;
            predictedAnswer: string;
            trueAnswer: string;
            inputs: string;
            outputs: string;
            sliderAriaLabel: string;
        };
        Legend: {
            featureLegend: string;
            posFeatureImportance: string;
            negFeatureImportance: string;
            cls: string;
            sep: string;
            selectedWord: string;
        };
        BarChart: {
            featureImportance: string;
        };
    };
    InterpretVision: {
        Cohort: {
            close: string;
            errorCohortName: string;
            errorNumSelected: string;
            itemsSelectedSingular: string;
            itemsSelectedPlural: string;
            save: string;
            saveAndClose: string;
            saveAndSwitch: string;
            textField: string;
            title: string;
        };
        Dashboard: {
            allData: string;
            columnOne: string;
            columnTwo: string;
            columnThree: string;
            columnFour: string;
            columnThreeOD: string;
            columnFourOD: string;
            columnFive: string;
            chooseObject: string;
            examples: string;
            filter: string;
            indexLabel: string;
            labelTypeDropdown: string;
            labelTypeAriaLabel: string;
            labelVisibilityDropdown: string;
            labelVisibilityAriaLabel: string;
            legendFailure: string;
            legendSuccess: string;
            loading: string;
            multiselect: string;
            notdefined: string;
            objectSelect: string;
            objectSelectionLabel: string;
            pageSize: string;
            panelTitle: string;
            panelExplanation: string;
            panelInformation: string;
            predictedLabel: string;
            predictedY: string;
            correctDetections: string;
            incorrectDetections: string;
            prefix: string;
            rows: string;
            rowsAriaLabel: string;
            search: string;
            selectAll: string;
            settings: string;
            showAll: string;
            tabOptionFirst: string;
            tabOptionSecond: string;
            tabOptionThird: string;
            thumbnailSize: string;
            titleBarError: string;
            titleBarSuccess: string;
            trueY: string;
        };
        Search: {
            defaultSearchLabel: string;
            searchResultsAriaLabel: string;
            emptySearchResultsAriaLabel: string;
        };
    };
    ModelAssessment: {
        AddingTab: {
            AddButtonText: string;
            CalloutContent: string;
            AddComponentAriaLabel: string;
            AddButtonAriaLabel: string;
            CalloutTitle: string;
            TabAddedMessage: {
                DataAnalysis: string;
                FeatureImportances: string;
                ErrorAnalysis: string;
                Fairness: string;
                ModelOverview: string;
                CausalAnalysis: string;
                Counterfactuals: string;
                Vision: string;
                Forecasting: string;
            };
        };
        CausalAnalysis: {
            Table: {
                ciLower: string;
                ciUpper: string;
                name: string;
                pValue: string;
                point: string;
                stderr: string;
                zstat: string;
            };
        };
        Cohort: {
            apply: string;
            delete: string;
            deleteAriaLabel: string;
            cancel: string;
            cancelAriaLabel: string;
            cohortInfo: string;
            cohortList: string;
            deleteCohort: string;
            deleteConfirm: string;
            selectCohort: string;
            selectCohortAriaLabel: string;
            shiftCohort: string;
            shiftCohortAriaLabel: string;
            shiftCohortDescription: string;
        };
        CohortInformation: {
            ShiftCohort: string;
            SwitchTimeSeries: string;
            NewCohort: string;
            DataPoints: string;
            DefaultCohort: string;
            Filters: string;
            GlobalCohort: string;
        };
        CohortSettings: {
            CohortSettingsDescription: string;
            CohortSettingsTitle: string;
        };
        ComponentNames: {
            ChartView: string;
            CausalAnalysis: string;
            Counterfactuals: string;
            DataAnalysis: string;
            DataBalance: string;
            DataExplorer: string;
            ErrorAnalysis: string;
            Fairness: string;
            FeatureImportances: string;
            Forecasting: string;
            ModelOverview: string;
            TableView: string;
            VisionTab: string;
        };
        DashboardSettings: {
            Content: string;
            DashboardComponents: string;
            DataPoints: string;
            DeleteDialog: {
                Cancel: string;
                Content: string;
                Delete: string;
                Title: string;
            };
            Title: string;
        };
        DataBalance: {
            AggregateBalanceMeasures: {
                Callout: {
                    Description: string;
                    Title: string;
                };
                Measures: {
                    AtkinsonIndex: {
                        Description: string;
                        Name: string;
                    };
                    TheilLIndex: {
                        Description: string;
                        Name: string;
                    };
                    TheilTIndex: {
                        Description: string;
                        Name: string;
                    };
                };
                MeasuresNotComputed: string;
                Name: string;
                Table: {
                    Description: string;
                    FeatureName: string;
                    FeatureValue: string;
                };
            };
            DistributionBalanceMeasures: {
                Callout: {
                    Description: string;
                    Title: string;
                };
                Chart: {
                    Axes: {
                        DistributionMeasure: string;
                        MeasureValue: string;
                    };
                    Title1: string;
                    Title2: string;
                };
                Measures: {
                    ChiSquarePValue: {
                        Description: string;
                        Name: string;
                    };
                    ChiSquareStatistic: {
                        Description: string;
                        Name: string;
                    };
                    CrossEntropy: {
                        Description: string;
                        Name: string;
                    };
                    InfiniteNormDistance: {
                        Description: string;
                        Name: string;
                    };
                    JSDistance: {
                        Description: string;
                        Name: string;
                    };
                    KLDivergence: {
                        Description: string;
                        Name: string;
                    };
                    TotalVariationDistance: {
                        Description: string;
                        Name: string;
                    };
                    WassersteinDistance: {
                        Description: string;
                        Name: string;
                    };
                };
                MeasuresNotComputed: string;
                Name: string;
            };
            FeatureBalanceMeasures: {
                Callout: {
                    Description: string;
                    Title: string;
                };
                Chart: {
                    Axes: {
                        ClassA: string;
                        ClassB: string;
                    };
                    Tooltip: {
                        And: string;
                        ValueDescription1: string;
                        ValueDescription2: string;
                    };
                };
                Description1: string;
                Description2: string;
                Description3: string;
                FeaturePicker: string;
                LabelPicker: string;
                MeasurePicker: string;
                Measures: {
                    JaccardIndex: {
                        Description: string;
                        Name: string;
                    };
                    KendallRankCorrelation: {
                        Description: string;
                        Name: string;
                    };
                    LogLikelihoodRatio: {
                        Description: string;
                        Name: string;
                    };
                    PointwiseMutualInformation: {
                        Description: string;
                        Name: string;
                    };
                    SorensenDiceCoefficient: {
                        Description: string;
                        Name: string;
                    };
                    StatisticalParity: {
                        Description: string;
                        Name: string;
                    };
                    TTest: {
                        Description: string;
                        Name: string;
                    };
                    TTestPValue: {
                        Description: string;
                        Name: string;
                    };
                };
                MeasuresNotComputed: string;
                Name: string;
            };
            LearnMore: string;
            MeasuresNotComputed: string;
        };
        FeatureImportances: {
            CorrectPredictions: string;
            GlobalExplanation: string;
            IncorrectPredictions: string;
            InfoTitle: string;
            IndividualFeatureTabular: string;
            IndividualFeatureText: string;
            LocalExplanation: string;
            SelectionCounter: string;
            SelectionLimit: string;
            RowCheckboxAriaLabel: string;
            SelectionColumnAriaLabel: string;
        };
        IndividualFeatureImportanceView: {
            SmallInstanceSelection: string;
        };
        MainMenu: {
            DashboardSettings: string;
            cohortInfo: string;
            cohortList: string;
            cohortSettings: string;
            createCohort: string;
            shiftCohort: string;
        };
        Navigation: {
            modelStatistics: string;
        };
        ModelOverview: {
            metrics: {
                accuracy: {
                    name: string;
                    description: string;
                };
                coherence: {
                    name: string;
                    description: string;
                };
                fluency: {
                    name: string;
                    description: string;
                };
                equivalence: {
                    name: string;
                    description: string;
                };
                exactMatchRatio: {
                    name: string;
                    description: string;
                };
                groundedness: {
                    name: string;
                    description: string;
                };
                meteorScore: {
                    name: string;
                    description: string;
                };
                bleuScore: {
                    name: string;
                    description: string;
                };
                bertScore: {
                    name: string;
                    description: string;
                };
                relevance: {
                    name: string;
                    description: string;
                };
                rougeScore: {
                    name: string;
                    description: string;
                };
                hammingScore: {
                    name: string;
                    description: string;
                };
                f1Score: {
                    name: string;
                    description: string;
                };
                f1ScoreMacro: {
                    name: string;
                    description: string;
                };
                f1ScoreMicro: {
                    name: string;
                    description: string;
                };
                meanAbsoluteError: {
                    name: string;
                    description: string;
                };
                meanSquaredError: {
                    name: string;
                    description: string;
                };
                precision: {
                    name: string;
                    description: string;
                };
                precisionMacro: {
                    name: string;
                    description: string;
                };
                precisionMicro: {
                    name: string;
                    description: string;
                };
                recall: {
                    name: string;
                    description: string;
                };
                recallMacro: {
                    name: string;
                    description: string;
                };
                recallMicro: {
                    name: string;
                    description: string;
                };
                falsePositiveRate: {
                    name: string;
                    description: string;
                };
                falseNegativeRate: {
                    name: string;
                    description: string;
                };
                selectionRate: {
                    name: string;
                    description: string;
                };
                meanPrediction: {
                    name: string;
                    description: string;
                };
                meanAveragePrecision: {
                    name: string;
                    description: string;
                };
                averagePrecision: {
                    name: string;
                    description: string;
                };
                averageRecall: {
                    name: string;
                    description: string;
                };
                fairnessMetricDifference: string;
                fairnessMetricRatio: string;
            };
            metricsDropdown: string;
            metricsTypeDropdown: string;
            metricTypes: {
                macro: string;
                micro: string;
            };
            classSelectionDropdown: string;
            iouThresholdDropdown: {
                name: string;
                description: string;
                iconId: string;
                title: string;
            };
            notAvailable: string;
            countColumnHeader: string;
            dataCohortsHeatmapHeader: string;
            dataCohortsChartSelectionHeader: string;
            featureBasedCohortsChartSelectionHeader: string;
            disaggregatedAnalysisHeatmapHeader: string;
            fairnessMetricsHeatmapHeader: string;
            featuresDropdown: string;
            metricChartDropdownSelectionHeader: string;
            probabilityForClassSelectionHeader: string;
            targetSelectionHeader: string;
            metricSelectionDropdownPlaceholder: string;
            classSelectionDropdownPlaceholder: string;
            featureSelectionDropdownPlaceholder: string;
            probabilityDistributionPivotItem: string;
            regressionDistributionPivotItem: string;
            metricsVisualizationsPivotItem: string;
            confusionMatrixPivotItem: string;
            disaggregatedAnalysisFeatureSelectionPlaceholder: string;
            tableCountTooltip: string;
            tableMetricTooltip: string;
            tableDifferenceTooltip: string;
            tableRatioTooltip: string;
            boxPlotPlaceholder: string;
            chartCohortSelectionPlaceholder: string;
            metricSelectionButton: string;
            cohortSelectionButton: string;
            probabilityLabelSelectionButton: string;
            regressionTargetSelectionButton: string;
            selectAllCohortsOption: string;
            other: string;
            BoxPlot: {
                outlierProbability: string;
                outlierLabel: string;
                boxPlotSeriesLabel: string;
                lowerWhisker: string;
                upperWhisker: string;
                median: string;
                lowerQuartile: string;
                upperQuartile: string;
            };
            chartConfigApply: string;
            chartConfigCancel: string;
            chartConfigDatasetCohortSelectionPlaceholder: string;
            chartConfigFeatureBasedCohortSelectionPlaceholder: string;
            confusionMatrix: {
                confusionMatrixCohortSelectionLabel: string;
                confusionMatrixClassSelectionLabel: string;
                confusionMatrixClassMinSelectionError: string;
                confusionMatrixClassMaxSelectionError: string;
                confusionMatrixClassSelectionDefaultPlaceholder: string;
                confusionMatrixHeatmapTooltip: string;
                confusionMatrixYAxisLabel: string;
                confusionMatrixXAxisLabel: string;
                class: string;
            };
            nA: string;
            disaggregatedAnalysisBaseCohortDisclaimer: string;
            disaggregatedAnalysisBaseCohortWarning: string;
            probabilitySplineChartToggleLabel: string;
            countAxisLabel: string;
            helpMeChooseFeaturesButton: string;
            helpMeChooseMetricsButton: string;
            featureConfiguration: {
                flyoutHeader: string;
                flyoutSubHeader: string;
                flyoutDescription: string;
                selectAllRowsAriaLabel: string;
                flyoutAriaLabel: string;
                featureColumnHeader: string;
                featureSelectionAriaLabel: string;
                metricSelectionAriaLabel: string;
                groupsColumnHeader: string;
                categoricalGroupsCountRemark: string;
                continuousGroupsCountRemark: string;
                continuousFeatureBinningLabel: string;
                tooManyFeaturesSelectedWarning: string;
            };
            metricConfiguration: {
                flyoutHeader: string;
                flyoutSubHeader: string;
                flyoutDescription: string;
                noMetricsSelectedWarning: string;
                metricNameColumnHeader: string;
                metricDescriptionColumnHeader: string;
            };
            cohortSelection: {
                flyoutHeader: string;
                flyoutDescription: string;
            };
            regressionTargetOptions: {
                predictedY: string;
                trueY: string;
                error: string;
            };
            topLevelDescription: string;
            infoTitle: string;
            visualDisplayToggleLabel: string;
            featureBasedViewDescription: string;
        };
        TableViewTab: {
            Heading: string;
        };
    };
    Forecasting: {
        target: string;
        whatIfForecastingHeader: string;
        forecastHeader: string;
        whatIfForecastingDescription: string;
        whatIfForecastingChooseTimeSeries: string;
        forecastDescription: string;
        timeSeries: string;
        selectTimeSeries: string;
        singleTimeSeries: string;
        trueY: string;
        baselinePrediction: string;
        forecastComparisonHeader: string;
        forecastComparisonChartTitle: string;
        forecastComparisonChartTimeAxisLabel: string;
        Transformations: {
            multiply: string;
            divide: string;
            add: string;
            subtract: string;
            change: string;
        };
        TransformationCreation: {
            title: string;
            nameLabel: string;
            featureInstructions: string;
            operationInstructions: string;
            operationDropdownHeader: string;
            featureDropdownHeader: string;
            valueSpinButtonHeader: string;
            scenarioNamingInstructionsPlaceholder: string;
            scenarioNamingInstructions: string;
            scenarioNamingCollisionMessage: string;
            scenarioNamingLengthMessage: string;
            scenarioNamingInvalidCharactersMessage: string;
            valueErrorMessage: string;
            invalidCombinationErrorMessage: string;
            addTransformationButton: string;
            divisionAndMultiplicationBy: string;
        };
        TransformationTable: {
            nameColumnHeader: string;
            methodColumnHeader: string;
            divisionAndMultiplicationBy: string;
            header: string;
        };
        TimeSeries: {
            apply: string;
            cancel: string;
            cohortList: string;
            selectCohort: string;
            selectCohortAriaLabel: string;
            shiftCohort: string;
            shiftCohortAriaLabel: string;
            shiftCohortDescription: string;
        };
        TimeSeriesSettings: {
            CohortSettingsDescription: string;
            CohortSettingsTitle: string;
        };
    };
}>;
