"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CubicBezierIndex = void 0;
const CubicBezierControl_1 = require("./CubicBezierControl");
const mapIndexRecord_1 = require("./Utils/mapIndexRecord");
function buildCopy(controls) {
    const record = mapIndexRecord_1.mapIndexRecord(controls, (c) => new CubicBezierControl_1.CubicBezierControl(c));
    return new CubicBezierIndex(record);
}
/**
 * @param controls Controls to modify.
 * @param modifyPoint Function to take a point and return a new point.
 * @returns new CubicBezierIndex with modified points.
 */
function modifyControlPoints(controls, modifyPoint) {
    return new CubicBezierIndex(mapIndexRecord_1.mapIndexRecord(controls, (c) => new CubicBezierControl_1.CubicBezierControl({ c1: modifyPoint(c.c1), c2: modifyPoint(c.c2) })));
}
/**
 * Map of cubic bezier controls to numbered indexes.
 */
class CubicBezierIndex {
    /**
     * @param controls Builds a new record from JSON Record<number, ICubicBezierControl>
     * @returns CubicBezierRecord
     */
    static buildFromJSON(controls) {
        return buildCopy(controls);
    }
    /**
     * Controls will be copied by reference into this record if provided in constructor.
     * @param controls Cubic bezier controls mapped to indexes
     */
    constructor(controls) {
        if (controls) {
            Object.entries(controls).forEach(([idx, control]) => {
                const iIdx = Number(idx);
                if (Number.isSafeInteger(iIdx)) {
                    this[iIdx] = control;
                }
            });
        }
    }
    /**
     * Create a copy of this record and return it.
     * @returns CubicBezierRecord
     */
    copy() {
        return buildCopy(this);
    }
    /**
     * Create a new record with scaled controls.
     * @param scalePoint Function which takes a point and returns the new scaled point.
     */
    scale(scalePoint) {
        return modifyControlPoints(this, scalePoint);
    }
    /**
     * Create a new record with moved controls.
     * @param movePoint Function which takes a point and returns the new moved point.
     */
    move(movePoint) {
        return modifyControlPoints(this, movePoint);
    }
    /**
     * Create a new record with shifted controls.
     * @param dx Distance in x to shift control points.
     * @param dy Distance in y to shift control points.
     */
    shift(dx, dy) {
        return new CubicBezierIndex(mapIndexRecord_1.mapIndexRecord(this, (c) => {
            const control = c.copy();
            control.shift(dx, dy);
            return control;
        }));
    }
    boundToRect(rect) {
        return new CubicBezierIndex(mapIndexRecord_1.mapIndexRecord(this, (c) => c.boundToRect(rect)));
    }
    toJSON() {
        return mapIndexRecord_1.mapIndexRecord(this, (c) => c.toJSON());
    }
    forEach(fn) {
        mapIndexRecord_1.mapIndexRecord(this, fn);
    }
}
exports.CubicBezierIndex = CubicBezierIndex;
//# sourceMappingURL=CubicBezierIndex.js.map