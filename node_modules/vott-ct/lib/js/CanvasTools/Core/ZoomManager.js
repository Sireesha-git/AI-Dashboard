"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ZoomManager = exports.ZoomType = exports.ZoomDirection = void 0;
/**
 * Enum indicating zoom behavior
 */
var ZoomDirection;
(function (ZoomDirection) {
    ZoomDirection[ZoomDirection["In"] = 0] = "In";
    ZoomDirection[ZoomDirection["Out"] = 1] = "Out";
})(ZoomDirection = exports.ZoomDirection || (exports.ZoomDirection = {}));
/**
 * This indicates the point around which an image will be zoomed in our out.
 */
var ZoomType;
(function (ZoomType) {
    // This will zoom in/out based on browser default behavior
    ZoomType[ZoomType["Default"] = 0] = "Default";
    // This will zoom in/out based on the actual center point of image
    ZoomType[ZoomType["ImageCenter"] = 1] = "ImageCenter";
    // This will zoom in/out based on the center of the portion of image currently visible
    // or view port of editor container
    ZoomType[ZoomType["ViewportCenter"] = 2] = "ViewportCenter";
    // This will zoom in/out based on the position of the cursor on the image
    ZoomType[ZoomType["CursorCenter"] = 3] = "CursorCenter";
})(ZoomType = exports.ZoomType || (exports.ZoomType = {}));
/**
 * The manager for zoom functionality.
 */
class ZoomManager {
    constructor(isZoomEnabled = false, zoomCallbacks, maxZoom, zoomScale) {
        /**
         * The minimum zoom factor.
         * Defaults to 1 or 100%.
         */
        this.minZoomScale = 1;
        /**
         * The maximum zoom factor.
         * Defaults to 4 or 400%.
         */
        this.maxZoomScale = 4;
        /**
         * The factor or scale at which the zoom in / zoom out works incrementally.
         */
        this.zoomScale = 0.1;
        this.isZoomEnabled = isZoomEnabled;
        this.maxZoomScale = maxZoom ? maxZoom : this.maxZoomScale;
        this.zoomScale = zoomScale ? zoomScale : this.zoomScale;
        this.currentZoomScale = this.minZoomScale;
        this.previousZoomScale = this.minZoomScale;
        this.callbacks = zoomCallbacks;
        this.shouldResetZoomOnContentLoad = false;
    }
    /**
     * [Gets] The boolean flag that indicates if zoom settings needs to be reset when new content is loaded to canvas.
     */
    get resetZoomOnContentLoad() {
        return this.shouldResetZoomOnContentLoad;
    }
    /**
     * [Sets] The boolean flag that indicates if zoom settings needs to be reset when new content is loaded to canvas.
     */
    set resetZoomOnContentLoad(reset) {
        this.shouldResetZoomOnContentLoad = reset;
        if (reset) {
            this.previousZoomScale = this.currentZoomScale = 1;
        }
    }
    /**
     * Gets the singleton instance of Zoom Manager.
     * @param isZoomEnabled - Flag that indicates if zoom is enabled.
     * @param zoomCallbacks - [Optional] The collection of zoom callbacks.
     * @param maxZoom - [Optional] Maximum  zoom factor.
     * @param zoomScale - [Optional] Incremental/Decremental zoom factor.
     */
    static getInstance(isZoomEnabled = false, zoomCallbacks, maxZoom, zoomScale) {
        if (!ZoomManager.instance) {
            ZoomManager.instance = new ZoomManager(isZoomEnabled, zoomCallbacks, maxZoom, zoomScale);
        }
        return ZoomManager.instance;
    }
    /**
     * Updates the zoom values based on the direction of zoom.
     * @param zoomType - The direction of zoom.
     * @returns - Zoom data object.
     */
    updateZoomScale(zoomType, newScale) {
        this.previousZoomScale = this.currentZoomScale;
        const zoomData = this.getZoomData();
        let updatedZoomScale;
        if (newScale) {
            updatedZoomScale = newScale;
        }
        else {
            if (zoomType === ZoomDirection.In) {
                updatedZoomScale = this.currentZoomScale + this.zoomScale;
            }
            if (zoomType === ZoomDirection.Out) {
                updatedZoomScale = this.currentZoomScale - this.zoomScale;
            }
        }
        if (updatedZoomScale >= this.minZoomScale && updatedZoomScale <= this.maxZoomScale) {
            this.currentZoomScale = updatedZoomScale;
            zoomData.currentZoomScale = updatedZoomScale;
            return zoomData;
        }
    }
    /**
     * Sets the maximum zoom scale.
     * @param maxZoomScale - The maximum zoom scale.
     */
    setMaxZoomScale(maxZoomScale) {
        this.maxZoomScale = maxZoomScale;
    }
    /**
     * Sets the zoom scale.
     * @param zoomScale - Zoom factor.
     */
    setZoomScale(zoomScale) {
        this.zoomScale = zoomScale;
    }
    /**
     * Gets the zoomData object.
     * @returns - Zoom data object.
     */
    getZoomData() {
        return {
            minZoomScale: this.minZoomScale,
            maxZoomScale: this.maxZoomScale,
            currentZoomScale: this.currentZoomScale,
            previousZoomScale: this.previousZoomScale,
        };
    }
    /**
     * Deletes the single instance of zoom manager.
     */
    deleteInstance() {
        if (ZoomManager.instance) {
            delete ZoomManager.instance;
        }
    }
}
exports.ZoomManager = ZoomManager;
//# sourceMappingURL=ZoomManager.js.map