"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TagsComponent = void 0;
const RegionComponent_1 = require("./RegionComponent");
/**
 * An abstract visual component used internal do draw tags data for regions.
 */
class TagsComponent extends RegionComponent_1.RegionComponent {
    /**
     * Creates a new `TagsComponent` object.
     * @param paper - The `Snap.Paper` object to draw on.
     * @param paperRect - The parent bounding box for created component.
     * @param regionData - The `RegionData` object shared across components. Used also for initial setup.
     * @param tags - The `TagsDescriptor` object presenting colors and names for region tags.
     * @param styleId - The unique css style id for region.
     * @param styleSheet - The reference to the stylesheet object for rules insertion.
     * @param tagsUpdateOptions - The settings for redrawing tags.
     */
    constructor(paper, paperRect, regionData, tags, styleId, styleSheet, tagsUpdateOptions) {
        super(paper, paperRect, regionData, null);
        /**
         * Reference to the stylesheet element.
         */
        this.styleSheet = null;
        /**
         * Default styling rules.
         */
        this.styleMap = [];
        /**
         * Light styling rules used when `showRegionBackground` is set to `false`.
         */
        this.styleLightMap = [];
        this.styleId = styleId;
        this.styleSheet = styleSheet;
        this.tags = tags;
        this.tagsUpdateOptions = tagsUpdateOptions;
        this.node = paper.g();
        this.node.addClass("tagsLayer");
    }
    /**
     * Computing the bounding box of a given svg text element is an expensive rendering call,
     * given tag styles don't change and there is a set number of primary tag names caching improves
     * re-render performance significantly. https://bugzilla.mozilla.org/show_bug.cgi?id=1579181
     * @param primaryTagNode a given tag node which the content string will be used to lookup in the cache
     */
    static getCachedBBox(primaryTagNode) {
        const tagName = primaryTagNode.node.innerHTML;
        if (TagsComponent.bboxCache[tagName]) {
            return TagsComponent.bboxCache[tagName];
        }
        TagsComponent.bboxCache[tagName] = primaryTagNode.getBBox();
        return TagsComponent.bboxCache[tagName];
    }
    /**
     * Updates component with new `TagsDescriptor` object and new drawing settings.
     * @param tags - The new `TagsDescriptor` object.
     * @param options - The new drawing settings.
     */
    updateTags(tags, options) {
        this.tags = tags;
        this.tagsUpdateOptions = options;
        this.rebuildTagLabels();
        this.clearStyleMaps();
        this.initStyleMaps(tags);
        const showBackground = (options !== undefined) ? options.showRegionBackground : true;
        this.applyStyleMaps(showBackground);
        const showTagsText = (options !== undefined) ? options.showTagsText : true;
        this.applyStyleForTagsVisibility(showTagsText);
    }
    /**
     * Clears current styling rules.
     */
    clearStyleMaps() {
        while (this.styleSheet.cssRules.length > 0) {
            this.styleSheet.deleteRule(0);
        }
    }
    /**
     * Inserts the styling rules into the `styleSheet` object.
     * @param showRegionBackground - The flag to make background visible or transparent.
     */
    applyStyleMaps(showRegionBackground = true) {
        // Map primary tag color
        if (this.tags && this.tags.primary !== undefined) {
            window.requestAnimationFrame(() => {
                const sm = (showRegionBackground ? this.styleMap : this.styleLightMap);
                for (const r of sm) {
                    this.styleSheet.insertRule(`${r.rule}{${r.style}}`, 0);
                }
            });
        }
    }
    /**
     * Inserts the tags text visibility styling rule into the `styleSheet` object.
     * @param showTagsText - The flag to display tags text or not.
     */
    applyStyleForTagsVisibility(showTagsText = true) {
        if (this.tags && this.tags.primary !== undefined) {
            const visibility = showTagsText ? "block" : "none";
            const sm = [
                {
                    rule: `.${this.styleId} .primaryTagTextBGStyle`,
                    style: `display: ${visibility};`,
                },
                {
                    rule: `.${this.styleId} .primaryTagTextStyle`,
                    style: `display: ${visibility};`,
                },
            ];
            window.requestAnimationFrame(() => {
                for (const r of sm) {
                    this.styleSheet.insertRule(`${r.rule}{${r.style}}`, 0);
                }
            });
        }
    }
}
exports.TagsComponent = TagsComponent;
TagsComponent.bboxCache = {};
//# sourceMappingURL=TagsComponent.js.map