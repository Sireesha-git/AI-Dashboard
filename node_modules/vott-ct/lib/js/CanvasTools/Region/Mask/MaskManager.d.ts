import Konva from "konva";
import { IBrushSize, IMask, IMaskManagerCallbacks, MaskSelectorMode } from "../../Interface/IMask";
export declare type LineJoin = "round" | "bevel" | "miter";
export declare type LineCap = "butt" | "round" | "square";
export declare class MasksManager {
    /**
     * Reference to the host konva stage element.
     */
    konvaStage: Konva.Stage;
    /**
     * The current selected mode for mask. Brush or Eraser
     */
    maskSelectionMode: MaskSelectorMode;
    /**
     * The brush and eraser size
     */
    brushSize: IBrushSize;
    /**
     * Reference to the host konva div element.
     */
    konvaContainerHostElement: HTMLDivElement;
    /**
     * Reference to the host div element.
     */
    private editorDiv;
    /**
     * The current width of the editorDiv.
     */
    private currentEditorDivWidth;
    /**
     * The image mask holder
     */
    private maskImage?;
    /**
     * The width of the source content.
     */
    private sourceWidth;
    /**
     * The height of the source content.
     */
    private sourceHeight;
    /**
     * Reference to the konva layer element that contains only the masks drawn
     */
    private canvasLayer;
    /**
     * The list of callbacks needed for mask manager
     */
    private callbacks;
    /**
     * The list of tags used to draw masks
     */
    private tagsList;
    constructor(editorDiv: HTMLDivElement, konvaDivHostElement: HTMLDivElement, callbacks: IMaskManagerCallbacks);
    /**
     * sets the height and width of source image
     * @param width - width of image
     * @param height - height of image
     */
    setSourceDimensions(width: number, height: number): void;
    /**
     * enables and disables the masks manager with selected mask mode
     * @param enabled - indicates if mask selection is enabled
     * @param mode - optional. sets the mode of mask selection to either brush or eraser
     */
    setSelection(enabled: boolean, mode?: MaskSelectorMode): void;
    /**
     * sets the brush size
     * @param size - brush size
     */
    setBrushSize(size: IBrushSize): void;
    /**
     * removes all masks and resets konva
     */
    eraseAllMasks(): void;
    /**
     * Resizes the manager to specified `width` and `height`.
     * @param width - The new manager width.
     * @param height - The new manager height.
     * @param initialRender - Optional param if true, konvaStage scale is set at 1
     */
    resize(width: number, height: number, initialRender?: boolean): void;
    /**
     * hides or shows masks of particular tag name
     * @param isVisible sets the visibility to true or false
     * @param tagName name of the tag to update visibility
     */
    updateMaskVisibility(isVisible: boolean, tagName: string): void;
    /**
     * converts all polygons to mask
     */
    polygonsToMask(): void;
    /**
     * gets all the masks drawn on the canvas.
     */
    getAllMasks(): IMask;
    /**
     * Draws all the masks on the canvas
     * @param allMasks - all masks data to be drawn on canvas
     */
    loadAllMasks(allMasks: IMask): void;
    /**
     * Removes antialiasing or smoothening from image data.
     * When drawing a shape on the canvas with smoothening on, the shape's edge has mixed pixel value
     * hence it looks curved. But when extracting image data out of canvas, we need each pixel to belong
     * to either of our tag colors. Hence if a pixel is on edge (its color value does not match any of the tag colors),
     * we look for the pixel value of its neighbouring 8 pixels to determine if we can assign the neighbours pixel value
     * to this pixel starting from topLeft pixel and going clockwise.
     */
    private unSmoothenImageData;
    /**
     * gets the pixels from the imageData that do not match any tag color. Hence they are edge pixels
     */
    private getEdgePixelArray;
    private initializeImageMask;
    private updateMaskVisibilityInternal;
    private updateAllMaskVisibility;
    private convertRegionsToMask;
    private loadMasksInternal;
    private setKonvaCursor;
    private base64EncodedMaskCursor;
    private updateZIndex;
    private getScaledPointerPosition;
    private addListeners;
    private getCurrentDimension;
    private getLineShapeAttributes;
    private reSizeStage;
    private rePositionStage;
    private getTagsDescriptor;
    private addTagsDescriptor;
    private resetKonvaLayer;
    private buildUIElements;
}
